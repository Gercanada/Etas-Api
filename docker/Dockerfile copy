FROM node:18
# RUN npm install -g npm@^9.3
WORKDIR /usr/src/app
RUN chown -R www-data:www-data .

# Copia el archivo de configuración del servidor de nginx
COPY nginx.conf /etc/nginx/nginx.conf.d
# Instala nodemon y typescript globalmente
RUN npm install -g npm@^9.3 nodemon typescript dotenv

# Copia los archivos de configuración de la aplicación (por ejemplo, package.json)
COPY package*.json ./
# Instala dependencias del proyecto
RUN npm install
# ENV NODE_PATH=node_modules
#CMD npm install || true
# RUN /bin/bash 'npm install'
# si no jala correr en bash container

# Copia el código fuente de la aplicación
# COPY . .
# CMD tsc
# Cambiar la propiedad después de la instalación y compilación
RUN chown -R www-data:www-data /usr/src/app

# CMD ["tsc","node"]
CMD ["tsc" , "--watch", "nodemon", "dist/app.js"]
# docker compose up
# docker compose up --build 
# docker compose build --no-cache 
# docker compose down
# docker exec -it "container name" /bim/bash
#! CMD tsc --watch
#!Si no se crean dist y node modules, ejecutae en el contenedor  tsc && npm i
#! Si no arranca, instalar y construir directamente con npm i y tsc , Luego se puede compose up
#! Correr tsc --watch y nodemon app.js dentro de sh 

# Usar una imagen base de Ubuntu
FROM ubuntu:22.04


ARG UID
ARG GID

# Definir el directorio de trabajo
WORKDIR /usr/src/app

# Instalar Node.js, npm y supervisor
RUN apt-get update && \
    apt-get install -y curl software-properties-common supervisor && \
    curl -sL https://deb.nodesource.com/setup_18.x | bash - && \
    apt-get install -y nodejs

# Instalar nodemon y typescript globalmente
RUN npm install -g nodemon typescript

# Copiar archivos de configuración del proyecto
COPY package*.json /usr/src/app
COPY tsconfig.json /usr/src/app

# Instalar dependencias del proyecto
RUN npm install

# Copiar el resto de los archivos del proyecto
# COPY . .

# Dar permiso al usuario www-data
# RUN chown -R www-data:www-data /usr/src/app
RUN groupadd -g $GID user && \
    useradd -u $UID -g user -m user

USER user

RUN chown -R www-data:www-data /usr/src/app

# Cambiar al usuario 'node'
# USER www-data
# RUN groupadd --force -g $WWWGROUP node
# RUN useradd -ms /bin/bash --no-user-group -g $WWWGROUP -u 1337 node
# RUN usermod -aG docker node
# RUN newgrp docker

# Exponer el puerto (ajustar según sea necesario)
EXPOSE 8000

# Copiar la configuración de Supervisor
COPY ./docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Usar el script de inicio personalizado
COPY ./docker/start-container /usr/local/bin/start-container
RUN chmod +x /usr/local/bin/start-container

# Iniciar con el script de inicio
CMD ["docker/start-container"]


# # docker build -t mi-app-node .
# # docker run -p 3000:3000 mi-app-node
# chown -R www-data:www-data /usr/src/app  #! 

# docker run -p 8000:8000 etas-api-node-api